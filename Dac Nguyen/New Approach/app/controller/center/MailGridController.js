/*
 * File: app/controller/MailGridController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EmailPrototype.controller.center.MailGridController', {
    extend: 'EmailPrototype.controller.AbstractFdController',

    config:{
        itemToDisplay: null
    },

    updateItemToDisplay:function(newItem, oldItem){
        var propertyPanel = Ext.ComponentQuery.query('panel#properties')[0];
        var displayPreview = Ext.ComponentQuery.query('textareafield#displaypreview')[0];
        //debugger;
        if(propertyPanel.items.length > 0) {
            propertyPanel.removeAll();
        }
        if(newItem !== null) {
            var arrDisplayField = new Array();
             arrDisplayField.push(this.buildPropertyDisplayField('Subject',newItem.get('subject')));
          //  debugger;
            var dateReceived = Ext.Date.parse(newItem.get('received'),'Y-m-d H:i:s');
            arrDisplayField.push(this.buildPropertyDisplayField('Received',Ext.Date.format(dateReceived, 'F j, Y, h:iA')));
             arrDisplayField.push(this.buildPropertyDisplayField('From',newItem.get('from')));
             arrDisplayField.push(this.buildPropertyDisplayField('To',newItem.get('to')));
             propertyPanel.add(arrDisplayField);
             displayPreview.setValue(newItem.get('message'));
        } else {
            propertyPanel.add({html: 'Please select 1 item only to view property'});
            displayPreview.setValue('Please select 1 item only to view property');
        }
    },

    init: function(application) {
            this.control({
                "mailgrid": {
                    deselect: this.onCheckboxModelDeselect,
                    select: this.onCheckboxModelSelect
                }
            });
        },

    getViewConfig:function(){
        var me = this, containedItems, cfg;

        var viewId = me.getViewId('mailgrid');

      //  debugger; // MAILLLLL >> 2 objs. OK
        cfg = {
            xtype: 'mailgrid',
            itemId: viewId,
        }
        return cfg;
    },

    onCheckboxModelDeselect: function(rowmodel, record, index, eOpts) {
      //  alert('Checkbox Select');
        var numberOfSelected = rowmodel.getSelection().length;
        if(numberOfSelected === 1) {
            this.setItemToDisplay(rowmodel.getSelection()[0]);
        } else {
            this.setItemToDisplay(null);
        }

    },

    onCheckboxModelSelect: function(rowmodel, record, index, eOpts) {
      //  alert('Checkbox Select');
        var numberOfSelected = rowmodel.getSelection().length;
        if(numberOfSelected === 1) {
             this.setItemToDisplay(record);
        } else {
            this.setItemToDisplay(null);
        }

    },

    buildPropertyDisplayField: function(label, value) {
        var cfg = {
            xtype: 'displayfield',
            fieldLabel: label,
            labelAlign: 'top',
            labelStyle: 'color:#666;font-weight:bold;',
            value: value} ;
        return cfg;

    },


    

});
