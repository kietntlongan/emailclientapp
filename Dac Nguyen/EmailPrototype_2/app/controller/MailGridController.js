/*
 * File: app/controller/MailGridController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EmailPrototype.controller.MailGridController', {
    extend: 'Ext.app.Controller',

    onCheckboxModelDeselect: function(rowmodel, record, index, eOpts) {
        //alert('Checkbox Select');
        var numberOfSelected = rowmodel.getSelection().length;
        var propertyPanel = Ext.ComponentQuery.query('panel#properties')[0];
        var displayPreview = Ext.ComponentQuery.query('textareafield#displaypreview')[0];
        //debugger;
        if(propertyPanel.items.length > 0) {
            propertyPanel.removeAll();
        }
        if(numberOfSelected === 1) {
             var arrDisplayField = new Array();
            var itemSelected = rowmodel.getSelection()[0];
             arrDisplayField.push(this.buildPropertyDisplayField('Subject',itemSelected.get('subject')));
          //  debugger;
            var dateReceived = Ext.Date.parse(itemSelected.get('received'),'Y-m-d H:i:s');
            arrDisplayField.push(this.buildPropertyDisplayField('Received',Ext.Date.format(dateReceived, 'F j, Y, h:iA')));
             arrDisplayField.push(this.buildPropertyDisplayField('From',itemSelected.get('from')));
             arrDisplayField.push(this.buildPropertyDisplayField('To',itemSelected.get('to')));
             propertyPanel.add(arrDisplayField);
             displayPreview.setValue(record.get('message'));
        } else {
            propertyPanel.add({html: 'Please select 1 item only to view property'});
            displayPreview.setValue('Please select 1 item only to view property');
        }

    },

    onCheckboxModelSelect: function(rowmodel, record, index, eOpts) {
        //alert('Checkbox Select');
        var numberOfSelected = rowmodel.getSelection().length;
        var propertyPanel = Ext.ComponentQuery.query('panel#properties')[0];
        var displayPreview = Ext.ComponentQuery.query('textareafield#displaypreview')[0];
        //debugger;
        if(propertyPanel.items.length > 0) {
            propertyPanel.removeAll();
        }
        if(numberOfSelected === 1) {
             var arrDisplayField = new Array();
             arrDisplayField.push(this.buildPropertyDisplayField('Subject',record.get('subject')));
          //  debugger;
            var dateReceived = Ext.Date.parse(record.get('received'),'Y-m-d H:i:s');
            arrDisplayField.push(this.buildPropertyDisplayField('Received',Ext.Date.format(dateReceived, 'F j, Y, h:iA')));
             arrDisplayField.push(this.buildPropertyDisplayField('From',record.get('from')));
             arrDisplayField.push(this.buildPropertyDisplayField('To',record.get('to')));
             propertyPanel.add(arrDisplayField);
            displayPreview.setValue(record.get('message'));
        } else {
            propertyPanel.add({html: 'Please select 1 item only to view property'});
            displayPreview.setValue('Please select 1 item only to view property');
        }

    },

    buildPropertyDisplayField: function(label, value) {
        var cfg = {
            xtype: 'displayfield',
            fieldLabel: label,
            labelAlign: 'top',
            labelStyle: 'color:#666;font-weight:bold;',
            value: value} ;
        return cfg;

    },

    init: function(application) {
        this.control({
            "mailgrid": {
                deselect: this.onCheckboxModelDeselect,
                select: this.onCheckboxModelSelect
            }
        });
    }

});
